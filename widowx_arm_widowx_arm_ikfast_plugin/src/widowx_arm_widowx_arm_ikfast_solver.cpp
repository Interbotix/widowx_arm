/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-01-24 09:04:36.671197
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.14203)*x3);
x11=((1.0)*x0);
x12=((1.0)*x7);
x13=((0.0715)*x3);
x14=((1.0)*x3);
x15=((1.9e-7)*x4);
x16=((0.0715)*x4);
x17=((1.9e-7)*x3);
x18=((1.0)*x4);
x19=((1.0)*x5);
x20=(x0*x2);
x21=(x2*x4);
x22=(x0*x1);
x23=(x1*x6);
x24=(x2*x6);
x25=(x1*x4);
IkReal x26=((1.0)*x22);
eetrans[0]=(((x5*((((x16*x20))+(((-1.0)*x13*x26))))))+(((0.04825)*x20))+(((0.14203)*x22))+(((0.14203)*x20*x4))+(((-1.0)*x10*x26))+((x7*(((((-1.0)*x13*x20))+(((-1.0)*x16*x26))))))+((x17*x20))+((x15*x22)));
IkReal x27=((1.0)*x23);
eetrans[1]=(((x7*(((((-1.0)*x13*x24))+(((-1.0)*x16*x27))))))+(((0.04825)*x24))+(((0.14203)*x23))+(((-1.0)*x10*x27))+(((0.14203)*x21*x6))+((x17*x24))+((x5*((((x16*x24))+(((-1.0)*x13*x27))))))+((x15*x23)));
IkReal x28=((1.0)*x16);
IkReal x29=((1.0)*x2);
eetrans[2]=((0.125)+((x7*((((x1*x13))+(((-1.0)*x2*x28))))))+((x5*(((((-1.0)*x1*x28))+(((-1.0)*x13*x29))))))+(((-1.0)*x1*x17))+(((0.14203)*x2))+(((-1.0)*x10*x29))+(((-0.14203)*x25))+(((-0.04825)*x1))+((x15*x2)));
eerot[0]=((((-1.0)*x8*((((x12*((((x11*x25))+((x11*x2*x3))))))+((x19*((((x22*x3))+(((-1.0)*x11*x21))))))))))+((x6*x9)));
eerot[1]=((((-1.0)*x11*x9))+(((-1.0)*x8*((((x19*((((x23*x3))+(((-1.0)*x18*x24))))))+((x12*((((x18*x23))+((x14*x24)))))))))));
eerot[2]=((-1.0)*x8*((((x19*((x25+((x2*x3))))))+((x12*((((x18*x2))+(((-1.0)*x1*x14)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.125)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x31 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x31.valid){
continue;
}
IkReal x30=x31.value;
j0array[0]=((-1.0)*x30);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x30)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-0.00422699033747949)*pz*(r01*r01)*(sj0*sj0)))+(((-7.75170003461906e-6)*(cj0*cj0)*(r00*r00)))+(((0.000537348187506967)*py*sj0*(r01*r01)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((0.56812)*pz*(py*py)*(r02*r02)))+(((0.0019733285)*pz*r01*r02*sj0))+(((0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((-0.00845398067495898)*cj0*pz*r00*r01*sj0))+(((0.386)*pz*r01*r02*sj0*(px*px)))+(((-0.579)*px*r00*r01*sj0*(py*py)))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.193)*cj0*py*r00*r01*(pz*pz)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.0751217085999278)*(pz*pz)*(r02*r02)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.0186244999997112)*px*py*r00*r01))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.00143598031249303)*cj0*px*(r02*r02)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((0.386)*cj0*pz*r00*r02*(py*py)))+(((0.0111367499998556)*cj0*px*py*sj0*(r01*r01)))+(((-0.193)*px*r00*r01*sj0*(pz*pz)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.193)*cj0*(px*px*px)*(r02*r02)))+(((0.56812)*r01*r02*(py*py*py)))+(((-1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((0.191141417199856)*cj0*py*pz*r00*r02*sj0))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(py*py)*(r00*r00)))+(((0.00422699033747949)*py*r01*r02*(sj0*sj0)))+(((0.191141417199856)*px*pz*r00*r02*(cj0*cj0)))+(((-0.0055683749999278)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.0093122499998556)*(px*px)*(r00*r00)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-1.55034000692381e-5)*cj0*r00*r01*sj0))+(((-0.00422699033747949)*pz*(cj0*cj0)*(r00*r00)))+(((-1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.0055683749999278)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.000537348187506967)*cj0*py*r00*r01))+(((-2.27248)*px*py*pz*r00*r01))+(((1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.386)*cj0*px*py*pz*r01*r02))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-1.70436)*px*r00*r02*(pz*pz)))+(((0.191141417199856)*cj0*px*pz*r01*r02*sj0))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((0.000357149629786981)*(r02*r02)))+(((-0.1800046672)*cj0*px*py*sj0*(r02*r02)))+(((-0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((-1.70436)*py*r01*r02*(pz*pz)))+(((0.193)*py*sj0*(px*px)*(r01*r01)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.00422699033747949)*cj0*py*r00*r02*sj0))+(((0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.191141417199856)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((0.56812)*py*r01*r02*(px*px)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.00158175260252051)*px*r00*r02))+(((-0.00143598031249303)*py*sj0*(r02*r02)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.00422699033747949)*px*r00*r02*(cj0*cj0)))+(((1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-7.75170003461906e-6)*(r01*r01)*(sj0*sj0)))+(((0.0658094586000722)*(px*px)*(r02*r02)))+(((0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.000280271846855)*r01*r02*sj0))+(((-0.193)*cj0*px*(py*py)*(r02*r02)))+(((-0.386)*px*py*pz*r00*r02*sj0))+(((-0.386)*cj0*px*(py*py)*(r01*r01)))+(((-0.0093122499998556)*(py*py)*(r01*r01)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-0.193)*cj0*(px*px*px)*(r00*r00)))+(((-0.579)*cj0*py*r00*r01*(px*px)))+(((-0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.000537348187506967)*px*r00*r01*sj0))+(((0.00158175260252051)*py*r01*r02))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.150243417199856)*py*pz*r01*r02))+(((0.56812)*px*r00*r02*(py*py)))+(((-0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((0.000537348187506967)*cj0*px*(r00*r00)))+(((-0.386)*py*sj0*(px*px)*(r00*r00)))+(((0.0111367499998556)*px*py*r00*r01*(sj0*sj0)))+(((0.0111367499998556)*px*py*r00*r01*(cj0*cj0)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.56812)*pz*(px*px)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.56812)*r00*r02*(px*px*px)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.13624)*pz*(px*px)*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.0955707085999278)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.00158175260252051)*pz*(r02*r02)))+(((0.000280271846855)*cj0*r00*r02))+(((0.193)*cj0*r00*r01*(py*py*py)))+(((-1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.0055683749999278)*(cj0*cj0)*(py*py)*(r00*r00)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.0111367499998556)*cj0*px*py*sj0*(r00*r00)))+(((-2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.0900023336)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.193)*py*sj0*(px*px)*(r02*r02)))+(((-0.150243417199856)*px*pz*r00*r02))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((-1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.193)*r00*r01*sj0*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.0055683749999278)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.00422699033747949)*cj0*px*r01*r02*sj0))+(((0.0658094586000722)*(py*py)*(r02*r02)))+(((-0.193)*sj0*(py*py*py)*(r02*r02)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.0955707085999278)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((-0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((0.0019733285)*cj0*pz*r00*r02))+(((0.191141417199856)*py*pz*r01*r02*(sj0*sj0)))+(((-1.13624)*pz*(py*py)*(r01*r01)))+(((-0.0900023336)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.193)*sj0*(py*py*py)*(r01*r01))));
op[1]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((0.00287196062498607)*cj0*py*r00*r02*sj0))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((0.00845398067495898)*cj0*px*(r02*r02)))+(((0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((-0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.21929432)*py*pz*r01*r02))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.2855113344)*cj0*py*pz*r00*r01))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((0.2855113344)*py*pz*sj0*(r02*r02)))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.00316350520504102)*cj0*py*r00*r01))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((0.00287196062498607)*cj0*px*r01*r02*sj0))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.01161748588)*pz*r01*r02*sj0))+(((-0.00574392124997213)*cj0*pz*r00*r01*sj0))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00112108738742)*cj0*r00*r01*sj0))+(((0.21929432)*cj0*py*pz*r00*r02*sj0))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((-0.01161748588)*cj0*pz*r00*r02))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((-0.00056054369371)*(r01*r01)*(sj0*sj0)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.00316350520504102)*cj0*px*(r00*r00)))+(((0.21929432)*cj0*px*pz*r01*r02*sj0))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.00107469637501393)*pz*(r02*r02)))+(((-0.0014596053192864)*cj0*r00*r02))+(((-0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((0.2855113344)*cj0*px*pz*(r02*r02)))+(((0.00287196062498607)*py*r01*r02*(sj0*sj0)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.00056054369371)*(r02*r02)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.10964716)*(pz*pz)*(r02*r02)))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((0.00107469637501393)*py*r01*r02))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.00845398067495898)*py*sj0*(r02*r02)))+(((-0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.386)*py*r01*r02*(px*px)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.00316350520504102)*py*sj0*(r01*r01)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.10964716)*(px*px)*(r02*r02)))+(((0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.2855113344)*cj0*r00*r02*(py*py)))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((-0.00316350520504102)*px*r00*r01*sj0))+(((0.386)*px*r00*r02*(py*py)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((-0.21929432)*px*pz*r00*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((0.2855113344)*cj0*px*pz*(r00*r00)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((-0.00287196062498607)*pz*(r01*r01)*(sj0*sj0)))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.2855113344)*py*pz*sj0*(r01*r01)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.2855113344)*px*pz*r00*r01*sj0))+(((0.2855113344)*px*py*r00*r02*sj0))+(((0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.00056054369371)*(cj0*cj0)*(r00*r00)))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.00287196062498607)*px*r00*r02*(cj0*cj0)))+(((0.00107469637501393)*px*r00*r02))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.10964716)*(py*py)*(r02*r02)))+(((0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*px*py*r01*r02))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.0014596053192864)*r01*r02*sj0))+(((-0.00287196062498607)*pz*(cj0*cj0)*(r00*r00))));
op[2]=((((8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.153892417199856)*(px*px)*(r02*r02)))+(((0.00144410191921716)*(r01*r01)*(sj0*sj0)))+(((0.274374584400144)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.188739834400289)*py*pz*r01*r02*(sj0*sj0)))+(((0.00144410191921716)*(cj0*cj0)*(r00*r00)))+(((-0.548749168800289)*px*py*r00*r01*(sj0*sj0)))+(((0.0943699172001444)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((0.188739834400289)*cj0*r00*r01*sj0*(pz*pz)))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((-2.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.32894148)*cj0*py*pz*r00*r01))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.0186244999997112)*(px*px)*(r00*r00)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.548749168800289)*cj0*px*py*sj0*(r01*r01)))+(((8.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.32894148)*cj0*r00*r02*(py*py)))+(((0.32894148)*cj0*px*pz*(r02*r02)))+(((-24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.153892417199856)*(py*py)*(r02*r02)))+(((-0.274374584400144)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.0186244999997112)*(py*py)*(r01*r01)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((0.270535834400289)*px*pz*r00*r02))+(((0.32894148)*px*py*r00*r02*sj0))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-8.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-2.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.188739834400289)*px*pz*r00*r02*(cj0*cj0)))+(((0.32894148)*cj0*px*pz*(r00*r00)))+(((-0.32894148)*r01*r02*sj0*(px*px)))+(((-4.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.270535834400289)*py*pz*r01*r02))+(((-2.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.0372489999994224)*px*py*r00*r01))+(((8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.32894148)*cj0*px*py*r01*r02))+(((-8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-8.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.188739834400289)*cj0*py*pz*r00*r02*sj0))+(((-0.188739834400289)*cj0*px*pz*r01*r02*sj0))+(((0.32894148)*py*pz*sj0*(r01*r01)))+(((0.0943699172001444)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.1800046672)*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.274374584400144)*(px*px)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.00168163108113)*r01*r02*sj0))+(((-0.1800046672)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-16.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((-0.548749168800289)*px*py*r00*r01*(cj0*cj0)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((0.135267917200144)*(pz*pz)*(r02*r02)))+(((-16.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((8.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.000745306059712438)*(r02*r02)))+(((-0.274374584400144)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((-0.00168163108113)*cj0*r00*r02))+(((-0.548749168800289)*cj0*px*py*sj0*(r00*r00)))+(((8.0)*px*pz*r00*r02*(py*py)))+(((0.00288820383843432)*cj0*r00*r01*sj0))+(((-8.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.32894148)*py*pz*sj0*(r02*r02)))+(((-8.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.3600093344)*cj0*px*py*sj0*(r02*r02)))+(((0.32894148)*px*pz*r00*r01*sj0)));
op[3]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.00287196062498607)*cj0*py*r00*r02*sj0))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((0.00845398067495898)*cj0*px*(r02*r02)))+(((0.10964716)*(pz*pz)*(r02*r02)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-0.2855113344)*px*pz*r00*r01*sj0))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((0.00056054369371)*(cj0*cj0)*(r00*r00)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((-0.2855113344)*cj0*px*py*r01*r02))+(((0.0014596053192864)*r01*r02*sj0))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.2855113344)*px*py*r00*r02*sj0))+(((-0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.00316350520504102)*cj0*py*r00*r01))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((0.00287196062498607)*cj0*px*r01*r02*sj0))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.01161748588)*pz*r01*r02*sj0))+(((-0.00574392124997213)*cj0*pz*r00*r01*sj0))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.2855113344)*cj0*px*pz*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((-0.01161748588)*cj0*pz*r00*r02))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((-0.10964716)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*r00*r02*(py*py)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.00316350520504102)*cj0*px*(r00*r00)))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((0.2855113344)*r01*r02*sj0*(px*px)))+(((0.00107469637501393)*pz*(r02*r02)))+(((-0.21929432)*cj0*px*pz*r01*r02*sj0))+(((-0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((0.00287196062498607)*py*r01*r02*(sj0*sj0)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.2855113344)*cj0*py*pz*r00*r01))+(((-0.2855113344)*py*pz*sj0*(r01*r01)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.10964716)*(py*py)*(r02*r02)))+(((0.0014596053192864)*cj0*r00*r02))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((0.00107469637501393)*py*r01*r02))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.00845398067495898)*py*sj0*(r02*r02)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.21929432)*py*pz*r01*r02))+(((0.386)*py*r01*r02*(px*px)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.00316350520504102)*py*sj0*(r01*r01)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.00112108738742)*cj0*r00*r01*sj0))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((-0.00316350520504102)*px*r00*r01*sj0))+(((0.386)*px*r00*r02*(py*py)))+(((0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((-0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((-0.2855113344)*cj0*px*pz*(r02*r02)))+(((-0.00287196062498607)*pz*(r01*r01)*(sj0*sj0)))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((0.21929432)*px*pz*r00*r02))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.21929432)*cj0*py*pz*r00*r02*sj0))+(((0.00287196062498607)*px*r00*r02*(cj0*cj0)))+(((0.00107469637501393)*px*r00*r02))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.00056054369371)*(r01*r01)*(sj0*sj0)))+(((-0.00056054369371)*(r02*r02)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.2855113344)*py*pz*sj0*(r02*r02)))+(((-0.00287196062498607)*pz*(cj0*cj0)*(r00*r00))));
op[4]=((((-0.386)*pz*r01*r02*sj0*(px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000537348187506967)*cj0*px*(r00*r00)))+(((-0.00158175260252051)*py*r01*r02))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.193)*sj0*(py*py*py)*(r02*r02)))+(((0.00422699033747949)*pz*(r01*r01)*(sj0*sj0)))+(((-7.75170003461906e-6)*(cj0*cj0)*(r00*r00)))+(((-1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.386)*cj0*px*py*pz*r01*r02))+(((0.193)*py*sj0*(px*px)*(r02*r02)))+(((1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((-0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.0019733285)*pz*r01*r02*sj0))+(((-1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.0751217085999278)*(pz*pz)*(r02*r02)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((-0.0019733285)*cj0*pz*r00*r02))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.0186244999997112)*px*py*r00*r01))+(((-0.56812)*pz*(px*px)*(r02*r02)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.000537348187506967)*py*sj0*(r01*r01)))+(((0.193)*cj0*px*(py*py)*(r02*r02)))+(((0.0111367499998556)*cj0*px*py*sj0*(r01*r01)))+(((-0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((0.00422699033747949)*pz*(cj0*cj0)*(r00*r00)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((1.13624)*pz*(py*py)*(r01*r01)))+(((0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.191141417199856)*cj0*py*pz*r00*r02*sj0))+(((-0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.579)*px*r00*r01*sj0*(py*py)))+(((0.191141417199856)*px*pz*r00*r02*(cj0*cj0)))+(((-0.0055683749999278)*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.0093122499998556)*(px*px)*(r00*r00)))+(((0.00143598031249303)*py*sj0*(r02*r02)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.00158175260252051)*pz*(r02*r02)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-1.55034000692381e-5)*cj0*r00*r01*sj0))+(((-0.00422699033747949)*py*r01*r02*(sj0*sj0)))+(((0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.386)*cj0*pz*r00*r02*(py*py)))+(((-0.000537348187506967)*px*r00*r01*sj0))+(((0.386)*py*sj0*(px*px)*(r00*r00)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.0055683749999278)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.00158175260252051)*px*r00*r02))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.191141417199856)*cj0*px*pz*r01*r02*sj0))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*px*r00*r02*(py*py)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((0.000357149629786981)*(r02*r02)))+(((-0.1800046672)*cj0*px*py*sj0*(r02*r02)))+(((-0.193)*cj0*px*(py*py)*(r00*r00)))+(((0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.193)*px*r00*r01*sj0*(pz*pz)))+(((-0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.191141417199856)*cj0*r00*r01*sj0*(pz*pz)))+(((0.386)*px*py*pz*r00*r02*sj0))+(((1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-7.75170003461906e-6)*(r01*r01)*(sj0*sj0)))+(((2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.0658094586000722)*(px*px)*(r02*r02)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.000280271846855)*r01*r02*sj0))+(((-1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.0093122499998556)*(py*py)*(r01*r01)))+(((-0.00422699033747949)*px*r00*r02*(cj0*cj0)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.56812)*r00*r02*(px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)))+(((1.70436)*px*r00*r02*(pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.150243417199856)*py*pz*r01*r02))+(((0.00845398067495898)*cj0*pz*r00*r01*sj0))+(((-0.00422699033747949)*cj0*py*r00*r02*sj0))+(((0.386)*cj0*px*(py*py)*(r01*r01)))+(((0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((1.70436)*py*r01*r02*(pz*pz)))+(((0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.0111367499998556)*px*py*r00*r01*(sj0*sj0)))+(((0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.0111367499998556)*px*py*r00*r01*(cj0*cj0)))+(((0.193)*sj0*(py*py*py)*(r01*r01)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.193)*py*sj0*(px*px)*(r01*r01)))+(((-0.193)*cj0*r00*r01*(py*py*py)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.193)*cj0*(px*px*px)*(r02*r02)))+(((-0.56812)*pz*(py*py)*(r02*r02)))+(((0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000537348187506967)*cj0*py*r00*r01))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.0955707085999278)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00143598031249303)*cj0*px*(r02*r02)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.000280271846855)*cj0*r00*r02))+(((0.193)*cj0*(px*px*px)*(r00*r00)))+(((-0.0055683749999278)*(cj0*cj0)*(py*py)*(r00*r00)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((1.13624)*pz*(px*px)*(r00*r00)))+(((0.0111367499998556)*cj0*px*py*sj0*(r00*r00)))+(((-0.0900023336)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.150243417199856)*px*pz*r00*r02))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.0055683749999278)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.579)*cj0*py*r00*r01*(px*px)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.00422699033747949)*cj0*px*r01*r02*sj0))+(((0.0658094586000722)*(py*py)*(r02*r02)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.0955707085999278)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.193)*cj0*py*r00*r01*(pz*pz)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((2.27248)*px*py*pz*r00*r01))+(((-0.193)*r00*r01*sj0*(px*px*px)))+(((1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((0.191141417199856)*py*pz*r01*r02*(sj0*sj0)))+(((-0.0900023336)*(py*py)*(r02*r02)*(sj0*sj0)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x32=(py*sj0);
IkReal x33=((13.9860139860015)*sj1);
IkReal x34=((4.75128617070035)*cj1);
IkReal x35=(cj0*px);
if( (((0.137082606896977)+((x34*x35))+(((13.9860139860015)*cj1*pz))+(((-4.75128617070035)*pz*sj1))+(((-49.2361261212472)*(px*px)))+(((-49.2361261212472)*(py*py)))+(((-49.2361261212472)*(pz*pz)))+((x32*x34))+((x32*x33))+((x33*x35)))) < -1-IKFAST_SINCOS_THRESH || (((0.137082606896977)+((x34*x35))+(((13.9860139860015)*cj1*pz))+(((-4.75128617070035)*pz*sj1))+(((-49.2361261212472)*(px*px)))+(((-49.2361261212472)*(py*py)))+(((-49.2361261212472)*(pz*pz)))+((x32*x34))+((x32*x33))+((x33*x35)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x36=IKasin(((0.137082606896977)+((x34*x35))+(((13.9860139860015)*cj1*pz))+(((-4.75128617070035)*pz*sj1))+(((-49.2361261212472)*(px*px)))+(((-49.2361261212472)*(py*py)))+(((-49.2361261212472)*(pz*pz)))+((x32*x34))+((x32*x33))+((x33*x35))));
j3array[0]=((-1.57079766454044)+(((-1.0)*x36)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079498904935)+x36);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x37=py*py;
IkReal x38=pz*pz;
IkReal x39=px*px;
IkReal x40=(px*sj0);
IkReal x41=((2.0)*py);
IkReal x42=(cj0*py);
IkReal x43=((0.0965)*r01);
IkReal x44=(cj0*pz);
IkReal x45=((0.28406)*cj1);
IkReal x46=(r00*sj0);
IkReal x47=(py*r00);
IkReal x48=((0.28406)*sj1);
IkReal x49=(cj0*r01);
IkReal x50=((0.0965)*r02*sj1);
IkReal x51=((1.0)*x49);
evalcond[0]=((-0.0252847709000361)+(((0.0965)*pz*sj1*x46))+((px*r01*x48))+((r02*x40*x45))+(((-1.0)*x40*x50))+((r02*x41*x44))+(((-2.0)*pz*r02*x40))+(((-1.0)*sj1*x43*x44))+(((-0.02031029)*(IKcos(j3))))+((x37*x49))+((x37*x46))+((cj0*px*r00*x41))+((x38*x46))+(((-1.0)*x39*x51))+(((-1.0)*x38*x51))+(((-1.0)*r02*x42*x45))+(((-0.0225005834)*x49))+(((-1.0)*x39*x46))+((x42*x50))+((cj1*px*x43))+(((-1.0)*pz*x45*x46))+(((-1.0)*r01*x40*x41))+(((0.0225005834)*x46))+(((-1.0)*x47*x48))+(((2.717e-8)*(IKsin(j3))))+(((-0.0965)*cj1*x47))+((r01*x44*x45)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-930613.577476485)+sj3+(((-747526.315789474)*cj3)));
j2eval[1]=IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x52=((0.14203)*pz);
IkReal x53=(cj0*px);
IkReal x54=((1.9e-7)*cj1);
IkReal x55=((0.0715)*sj1);
IkReal x56=(py*sj0);
IkReal x57=((1.9e-7)*sj1);
IkReal x58=(pz*sj3);
IkReal x59=((0.0715)*cj1);
IkReal x60=(cj3*pz);
IkReal x61=((0.14203)*cj1);
IkReal x62=(sj1*x56);
CheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(((-0.0201725117325)+(((-1.0)*x53*x54))+((cj1*x52))+((cj3*x53*x55))+((x59*x60))+(((-0.003449875)*sj3))+((cj3*x55*x56))+(((-0.010155145)*cj3))+(((0.14203)*sj1*x53))+(((-1.0)*x55*x58))+(((-1.0)*x54*x56))+((sj3*x56*x59))+(((0.14203)*x62))+((sj3*x53*x59))+((pz*x57)))),IkReal(((0.0068529744857)+(((-1.0)*x53*x57))+(((-1.0)*x56*x61))+(((-1.0)*x56*x57))+(((-1.0)*x53*x61))+(((0.003449875)*cj3))+((sj1*x52))+((x58*x59))+(((-1.0)*cj3*x56*x59))+((sj3*x53*x55))+(((-1.0)*pz*x54))+(((-0.010155145)*sj3))+(((-1.0)*cj3*x53*x59))+((sj3*x55*x56))+((x55*x60)))),IKFAST_ATAN2_MAGTHRESH);
if(!x63.valid){
continue;
}
CheckValue<IkReal> x64=IKPowWithIntegerCheck(IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3)))),-1);
if(!x64.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x63.value)+(((1.5707963267949)*(x64.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x65=IKsin(j2);
IkReal x66=IKcos(j2);
IkReal x67=(px*sj1);
IkReal x68=(py*sj1);
IkReal x69=(cj1*sj0);
IkReal x70=((1.0)*px);
IkReal x71=(pz*r00);
IkReal x72=((1.0)*r01);
IkReal x73=(cj0*r01);
IkReal x74=(pz*sj1);
IkReal x75=(r00*sj0);
IkReal x76=(cj0*cj1);
IkReal x77=((0.14203)*x65);
IkReal x78=((1.9e-7)*x66);
IkReal x79=((1.9e-7)*x65);
IkReal x80=((0.14203)*x66);
IkReal x81=((0.0715)*x65);
IkReal x82=((0.0715)*x66);
IkReal x83=(sj3*x82);
IkReal x84=(cj3*x81);
IkReal x85=(sj3*x81);
IkReal x86=(cj3*x82);
IkReal x87=(x79+x80+x86);
IkReal x88=(x77+x83+x84);
evalcond[0]=((-0.14203)+((sj0*x68))+(((-1.0)*x78))+((cj1*pz))+((cj0*x67))+x88);
evalcond[1]=((0.04825)+(((-1.0)*x70*x76))+x74+x87+(((-1.0)*x85))+(((-1.0)*py*x69)));
evalcond[2]=((((-1.0)*pz*x72*x76))+(((-1.0)*x78))+((x69*x71))+((r00*x68))+x88+(((-1.0)*r02*x69*x70))+(((-0.14203)*x75))+(((-1.0)*x67*x72))+((py*r02*x76))+(((0.14203)*x73)));
evalcond[3]=((((-1.0)*cj1*r01*x70))+(((-0.04825)*x75))+((r02*sj0*x67))+((cj1*py*r00))+x85+(((-1.0)*sj0*sj1*x71))+(((-1.0)*cj0*r02*x68))+((x73*x74))+(((-1.0)*x87))+(((0.04825)*x73)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x89=(py*sj0);
IkReal x90=((13.9860139860015)*sj1);
IkReal x91=((4.75128617070035)*cj1);
IkReal x92=(cj0*px);
if( (((0.137082606896977)+((x89*x91))+((x89*x90))+(((13.9860139860015)*cj1*pz))+(((-4.75128617070035)*pz*sj1))+(((-49.2361261212472)*(px*px)))+((x90*x92))+(((-49.2361261212472)*(py*py)))+(((-49.2361261212472)*(pz*pz)))+((x91*x92)))) < -1-IKFAST_SINCOS_THRESH || (((0.137082606896977)+((x89*x91))+((x89*x90))+(((13.9860139860015)*cj1*pz))+(((-4.75128617070035)*pz*sj1))+(((-49.2361261212472)*(px*px)))+((x90*x92))+(((-49.2361261212472)*(py*py)))+(((-49.2361261212472)*(pz*pz)))+((x91*x92)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x93=IKasin(((0.137082606896977)+((x89*x91))+((x89*x90))+(((13.9860139860015)*cj1*pz))+(((-4.75128617070035)*pz*sj1))+(((-49.2361261212472)*(px*px)))+((x90*x92))+(((-49.2361261212472)*(py*py)))+(((-49.2361261212472)*(pz*pz)))+((x91*x92))));
j3array[0]=((-1.57079766454044)+(((-1.0)*x93)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079498904935)+x93);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x94=py*py;
IkReal x95=pz*pz;
IkReal x96=px*px;
IkReal x97=(px*sj0);
IkReal x98=((2.0)*py);
IkReal x99=(cj0*py);
IkReal x100=((0.0965)*r01);
IkReal x101=(cj0*pz);
IkReal x102=((0.28406)*cj1);
IkReal x103=(py*r00);
IkReal x104=((0.28406)*sj1);
IkReal x105=(r00*sj0);
IkReal x106=(cj0*r01);
IkReal x107=((0.0965)*r02*sj1);
IkReal x108=((1.0)*x106);
evalcond[0]=((0.0252847709000361)+((r02*x101*x98))+(((-1.0)*x107*x97))+(((-0.0965)*cj1*x103))+(((0.0965)*pz*sj1*x105))+((x107*x99))+(((-1.0)*r02*x102*x99))+(((-0.0225005834)*x106))+(((-1.0)*pz*x102*x105))+(((-2.717e-8)*(IKsin(j3))))+((cj0*px*r00*x98))+(((-1.0)*sj1*x100*x101))+((px*r01*x104))+((r01*x101*x102))+((x106*x94))+(((-2.0)*pz*r02*x97))+((cj1*px*x100))+((r02*x102*x97))+(((-1.0)*x103*x104))+(((0.02031029)*(IKcos(j3))))+(((-1.0)*x108*x95))+(((-1.0)*x108*x96))+((x105*x95))+((x105*x94))+(((0.0225005834)*x105))+(((-1.0)*r01*x97*x98))+(((-1.0)*x105*x96)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-930613.577476485)+sj3+(((-747526.315789474)*cj3)));
j2eval[1]=IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x109=((0.14203)*pz);
IkReal x110=(cj0*px);
IkReal x111=((1.9e-7)*cj1);
IkReal x112=((0.0715)*sj1);
IkReal x113=(py*sj0);
IkReal x114=((1.9e-7)*sj1);
IkReal x115=(pz*sj3);
IkReal x116=((0.0715)*cj1);
IkReal x117=(cj3*pz);
IkReal x118=((0.14203)*cj1);
IkReal x119=(sj1*x113);
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(((-0.0201725117325)+((cj3*x110*x112))+(((-1.0)*x111*x113))+((cj3*x112*x113))+(((0.14203)*sj1*x110))+((sj3*x113*x116))+(((-1.0)*x112*x115))+((sj3*x110*x116))+((cj1*x109))+((pz*x114))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+(((0.14203)*x119))+(((-1.0)*x110*x111))+((x116*x117)))),IkReal(((0.0068529744857)+((sj3*x112*x113))+((sj1*x109))+(((0.003449875)*cj3))+((x112*x117))+((sj3*x110*x112))+(((-1.0)*cj3*x113*x116))+(((-1.0)*x113*x118))+(((-1.0)*x113*x114))+(((-1.0)*x110*x118))+(((-1.0)*x110*x114))+(((-1.0)*cj3*x110*x116))+(((-0.010155145)*sj3))+((x115*x116))+(((-1.0)*pz*x111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121=IKPowWithIntegerCheck(IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3)))),-1);
if(!x121.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x120.value)+(((1.5707963267949)*(x121.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x122=IKsin(j2);
IkReal x123=IKcos(j2);
IkReal x124=(px*sj1);
IkReal x125=(py*sj1);
IkReal x126=(cj1*sj0);
IkReal x127=((1.0)*px);
IkReal x128=(pz*r00);
IkReal x129=((1.0)*r01);
IkReal x130=(cj0*r01);
IkReal x131=(pz*sj1);
IkReal x132=(r00*sj0);
IkReal x133=(cj0*cj1);
IkReal x134=((1.9e-7)*x123);
IkReal x135=((0.14203)*x122);
IkReal x136=((1.9e-7)*x122);
IkReal x137=((0.14203)*x123);
IkReal x138=((0.0715)*x122);
IkReal x139=((0.0715)*x123);
IkReal x140=(sj3*x139);
IkReal x141=(cj3*x138);
IkReal x142=(cj3*x139);
IkReal x143=(sj3*x138);
IkReal x144=(x142+x137+x136);
IkReal x145=(x140+x141+x135);
evalcond[0]=((-0.14203)+((cj0*x124))+x145+((cj1*pz))+(((-1.0)*x134))+((sj0*x125)));
evalcond[1]=((0.04825)+(((-1.0)*x143))+x144+x131+(((-1.0)*py*x126))+(((-1.0)*x127*x133)));
evalcond[2]=((((-1.0)*x145))+((py*r02*x133))+(((0.14203)*x130))+(((-1.0)*pz*x129*x133))+(((-1.0)*r02*x126*x127))+x134+((r00*x125))+(((-1.0)*x124*x129))+((x126*x128))+(((-0.14203)*x132)));
evalcond[3]=((((-1.0)*x143))+(((-0.04825)*x132))+((cj1*py*r00))+x144+((r02*sj0*x124))+((x130*x131))+(((0.04825)*x130))+(((-1.0)*cj1*r01*x127))+(((-1.0)*cj0*r02*x125))+(((-1.0)*sj0*sj1*x128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x146=(r01*sj0);
IkReal x147=((1.4203e+15)*pz);
IkReal x148=((68529744857000.0)*cj1);
IkReal x149=(cj0*r00);
IkReal x150=((201725117325000.0)*sj1);
IkReal x151=(py*r01);
IkReal x152=((201725117325000.0)*cj1);
IkReal x153=((1900000000.0)*pz);
IkReal x154=(px*r00);
IkReal x155=((68529744857000.0)*sj1);
IkReal x156=(py*r02*sj0);
IkReal x157=(cj0*px*r02);
CheckValue<IkReal> x158=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x158.valid){
continue;
}
CheckValue<IkReal> x159 = IKatan2WithCheck(IkReal((((x149*x155))+(((-1900000000.0)*x151))+(((-1900000000.0)*x154))+(((-1.4203e+15)*x156))+(((-1.4203e+15)*x157))+(((-1.0)*r02*x153))+((x146*x155))+((x147*x149))+((x146*x147))+(((135850000.0)*cj4))+(((-1.0)*x146*x152))+((r02*x148))+(((-1.0)*x149*x152))+((r02*x150)))),IkReal((((x149*x153))+(((-1900000000.0)*x156))+(((-1900000000.0)*x157))+(((-1.0)*r02*x152))+(((-1.0)*x148*x149))+((x146*x153))+(((-1.0)*x146*x148))+(((-1.0)*x146*x150))+((r02*x147))+(((1.4203e+15)*x154))+(((1.4203e+15)*x151))+(((-1.0)*x149*x150))+(((-101551450000000.0)*cj4))+((r02*x155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x159.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x158.value)))+(x159.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x160=IKcos(j3);
IkReal x161=IKsin(j3);
IkReal x162=pz*pz;
IkReal x163=py*py;
IkReal x164=px*px;
IkReal x165=(r01*sj0);
IkReal x166=(cj0*px);
IkReal x167=((0.28406)*sj1);
IkReal x168=((0.14203)*sj1);
IkReal x169=((1.0)*r02);
IkReal x170=((0.0965)*sj1);
IkReal x171=(py*sj0);
IkReal x172=((0.0965)*cj1);
IkReal x173=(cj0*r00);
IkReal x174=(cj1*r02);
IkReal x175=((0.28406)*cj1);
IkReal x176=(r00*sj0);
IkReal x177=((0.04825)*cj1);
IkReal x178=((0.04825)*sj1);
IkReal x179=(py*r00);
IkReal x180=(cj0*r01);
IkReal x181=(px*r01);
IkReal x182=((2.0)*pz);
IkReal x183=((0.14203)*cj1);
IkReal x184=((2.0)*px*py);
IkReal x185=(px*r02*sj0);
IkReal x186=(pz*x180);
IkReal x187=((0.02031029)*x160);
IkReal x188=(cj4*x160);
IkReal x189=((2.717e-8)*x161);
IkReal x190=(cj4*x161);
IkReal x191=((1.0)*x164);
IkReal x192=(cj0*py*r02);
IkReal x193=((1.0)*x162);
evalcond[0]=((0.0027841875000361)+((pz*x175))+(((-1.0)*x189))+(((-1.0)*x193))+(((-1.0)*x191))+(((-1.0)*pz*x170))+x187+((x166*x172))+((x167*x171))+(((-1.0)*x163))+((x166*x167))+((x171*x172)));
evalcond[1]=((((-1.9e-7)*x190))+(((-1.0)*px*r00))+((x168*x173))+(((-1.0)*r02*x178))+(((0.14203)*x188))+((x173*x177))+(((-1.0)*pz*x169))+(((0.14203)*x174))+((x165*x177))+(((0.0715)*cj4))+((x165*x168))+(((-1.0)*py*r01)));
evalcond[2]=((((-1.0)*x166*x169))+((pz*x173))+(((-1.9e-7)*x188))+((pz*x165))+((x173*x178))+(((-0.14203)*x190))+(((0.04825)*x174))+((x165*x178))+(((-1.0)*x165*x183))+(((-1.0)*x169*x171))+(((-1.0)*x173*x183))+((r02*x168)));
evalcond[3]=((((-0.0252847709000361)*sj4))+((x163*x180))+((x162*x176))+((x172*x181))+((pz*x170*x176))+(((2.0)*x166*x179))+(((-1.0)*x180*x191))+(((-1.0)*x180*x193))+(((-1.0)*pz*x175*x176))+((x175*x186))+(((-1.0)*x170*x185))+(((-1.0)*x170*x186))+(((0.28406)*px*sj0*x174))+((x167*x181))+(((-1.0)*x176*x191))+((sj4*x189))+(((0.0225005834)*x176))+(((-1.0)*x165*x184))+(((-0.0225005834)*x180))+((x170*x192))+(((-1.0)*sj4*x187))+(((-0.28406)*cj0*py*x174))+((x182*x192))+((x163*x176))+(((-1.0)*x182*x185))+(((-1.0)*x172*x179))+(((-1.0)*x167*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x194=(cj4*sj3);
IkReal x195=(cj3*cj4);
j2eval[0]=((((-747526.315789474)*x194))+(((-1.0)*x195)));
j2eval[1]=IKsign(((((-1.9e-7)*x195))+(((-0.14203)*x194))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x196=(cj4*sj3);
IkReal x197=(cj3*cj4);
j2eval[0]=((((-1.0)*x196))+(((747526.315789474)*x197))+(((376315.789473684)*cj4)));
j2eval[1]=IKsign(((((-1.9e-7)*x196))+(((0.14203)*x197))+(((0.0715)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-930613.577476485)+sj3+(((-747526.315789474)*cj3)));
j2eval[1]=IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x198=((0.14203)*pz);
IkReal x199=(cj0*px);
IkReal x200=((1.9e-7)*cj1);
IkReal x201=((0.0715)*sj1);
IkReal x202=(py*sj0);
IkReal x203=((1.9e-7)*sj1);
IkReal x204=(pz*sj3);
IkReal x205=((0.0715)*cj1);
IkReal x206=(cj3*pz);
IkReal x207=((0.14203)*cj1);
IkReal x208=(sj1*x202);
CheckValue<IkReal> x209 = IKatan2WithCheck(IkReal(((-0.0201725117325)+((cj3*x199*x201))+(((-1.0)*x200*x202))+((x205*x206))+(((-1.0)*x201*x204))+((sj3*x199*x205))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+((cj3*x201*x202))+((sj3*x202*x205))+(((0.14203)*sj1*x199))+((pz*x203))+((cj1*x198))+(((-1.0)*x199*x200))+(((0.14203)*x208)))),IkReal(((0.0068529744857)+(((-1.0)*cj3*x202*x205))+(((0.003449875)*cj3))+((sj3*x199*x201))+((sj1*x198))+((x201*x206))+(((-1.0)*pz*x200))+(((-1.0)*x202*x203))+(((-1.0)*x202*x207))+(((-1.0)*cj3*x199*x205))+((x204*x205))+(((-1.0)*x199*x207))+(((-1.0)*x199*x203))+(((-0.010155145)*sj3))+((sj3*x201*x202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x209.valid){
continue;
}
CheckValue<IkReal> x210=IKPowWithIntegerCheck(IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3)))),-1);
if(!x210.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x209.value)+(((1.5707963267949)*(x210.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x211=IKsin(j2);
IkReal x212=IKcos(j2);
IkReal x213=(px*sj1);
IkReal x214=(py*sj1);
IkReal x215=(cj1*sj0);
IkReal x216=((1.0)*px);
IkReal x217=(pz*r00);
IkReal x218=((1.0)*r01);
IkReal x219=(cj0*r01);
IkReal x220=(pz*sj1);
IkReal x221=(r00*sj0);
IkReal x222=(cj0*cj1);
IkReal x223=((0.14203)*x211);
IkReal x224=((1.9e-7)*x212);
IkReal x225=((1.9e-7)*x211);
IkReal x226=((0.14203)*x212);
IkReal x227=((0.0715)*x211);
IkReal x228=((0.0715)*x212);
IkReal x229=(sj3*x228);
IkReal x230=(cj3*x227);
IkReal x231=(sj3*x227);
IkReal x232=(cj3*x228);
IkReal x233=(x225+x226+x232);
IkReal x234=(x229+x223+x230);
evalcond[0]=((-0.14203)+((cj0*x213))+((cj1*pz))+x234+((sj0*x214))+(((-1.0)*x224)));
evalcond[1]=((0.04825)+(((-1.0)*x216*x222))+(((-1.0)*py*x215))+(((-1.0)*x231))+x220+x233);
evalcond[2]=((((-1.0)*pz*x218*x222))+(((-0.14203)*x221))+((x215*x217))+x234+((py*r02*x222))+(((0.14203)*x219))+(((-1.0)*x213*x218))+(((-1.0)*r02*x215*x216))+((r00*x214))+(((-1.0)*x224)));
evalcond[3]=(((r02*sj0*x213))+(((-1.0)*sj0*sj1*x217))+((cj1*py*r00))+(((-1.0)*cj0*r02*x214))+((x219*x220))+(((-1.0)*x233))+x231+(((-1.0)*cj1*r01*x216))+(((0.04825)*x219))+(((-0.04825)*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-930613.577476485)+sj3+(((-747526.315789474)*cj3)));
j2eval[1]=IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x235=((0.14203)*pz);
IkReal x236=(cj0*px);
IkReal x237=((1.9e-7)*cj1);
IkReal x238=((0.0715)*sj1);
IkReal x239=(py*sj0);
IkReal x240=((1.9e-7)*sj1);
IkReal x241=(pz*sj3);
IkReal x242=((0.0715)*cj1);
IkReal x243=(cj3*pz);
IkReal x244=((0.14203)*cj1);
IkReal x245=(sj1*x239);
CheckValue<IkReal> x246=IKPowWithIntegerCheck(IKsign(((-0.0252847709000361)+(((-0.02031029)*cj3))+(((2.717e-8)*sj3)))),-1);
if(!x246.valid){
continue;
}
CheckValue<IkReal> x247 = IKatan2WithCheck(IkReal(((-0.0201725117325)+((cj1*x235))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+((sj3*x239*x242))+((sj3*x236*x242))+(((-1.0)*x238*x241))+((x242*x243))+(((-1.0)*x236*x237))+(((0.14203)*x245))+((cj3*x238*x239))+(((-1.0)*x237*x239))+((pz*x240))+(((0.14203)*sj1*x236))+((cj3*x236*x238)))),IkReal(((0.0068529744857)+((sj1*x235))+(((0.003449875)*cj3))+(((-1.0)*pz*x237))+((x238*x243))+(((-1.0)*x236*x244))+(((-1.0)*x236*x240))+((x241*x242))+(((-1.0)*cj3*x236*x242))+(((-0.010155145)*sj3))+(((-1.0)*cj3*x239*x242))+(((-1.0)*x239*x244))+(((-1.0)*x239*x240))+((sj3*x238*x239))+((sj3*x236*x238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x247.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x246.value)))+(x247.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x248=IKsin(j2);
IkReal x249=IKcos(j2);
IkReal x250=(px*sj1);
IkReal x251=(py*sj1);
IkReal x252=(cj1*sj0);
IkReal x253=((1.0)*px);
IkReal x254=(pz*r00);
IkReal x255=((1.0)*r01);
IkReal x256=(cj0*r01);
IkReal x257=(pz*sj1);
IkReal x258=(r00*sj0);
IkReal x259=(cj0*cj1);
IkReal x260=((1.9e-7)*x249);
IkReal x261=((0.14203)*x248);
IkReal x262=((1.9e-7)*x248);
IkReal x263=((0.14203)*x249);
IkReal x264=((0.0715)*x248);
IkReal x265=((0.0715)*x249);
IkReal x266=(sj3*x265);
IkReal x267=(cj3*x264);
IkReal x268=(cj3*x265);
IkReal x269=(sj3*x264);
IkReal x270=(x263+x262+x268);
IkReal x271=(x267+x266+x261);
evalcond[0]=((-0.14203)+((cj1*pz))+((sj0*x251))+x271+((cj0*x250))+(((-1.0)*x260)));
evalcond[1]=((0.04825)+x257+x270+(((-1.0)*py*x252))+(((-1.0)*x269))+(((-1.0)*x253*x259)));
evalcond[2]=((((-1.0)*pz*x255*x259))+(((-1.0)*x250*x255))+(((-1.0)*r02*x252*x253))+(((-0.14203)*x258))+((r00*x251))+x260+(((0.14203)*x256))+((py*r02*x259))+(((-1.0)*x271))+((x252*x254)));
evalcond[3]=((((-0.04825)*x258))+(((-1.0)*cj1*r01*x253))+((x256*x257))+((cj1*py*r00))+x270+(((-1.0)*sj0*sj1*x254))+((r02*sj0*x250))+(((-1.0)*x269))+(((-1.0)*cj0*r02*x251))+(((0.04825)*x256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x272=((0.04825)*cj4);
IkReal x273=((0.0715)*cj3);
IkReal x274=((0.0715)*sj3);
IkReal x275=(cj1*r02);
IkReal x276=(cj4*sj3);
IkReal x277=(cj3*cj4);
IkReal x278=(pz*sj1);
IkReal x279=(r01*sj0*sj1);
IkReal x280=(cj0*r00*sj1);
IkReal x281=(cj0*cj1*px);
IkReal x282=(cj1*py*sj0);
CheckValue<IkReal> x283 = IKatan2WithCheck(IkReal(((((-1.0)*x273*x275))+(((-1.0)*x273*x279))+((sj3*x272))+(((-0.14203)*x280))+(((-0.14203)*x275))+(((-0.14203)*x279))+(((-1.0)*x276*x281))+(((-1.0)*x276*x282))+(((-1.0)*x273*x280))+((x276*x278)))),IkReal(((((-1.0)*x274*x275))+(((-1.0)*x274*x279))+(((1.9e-7)*x279))+(((1.9e-7)*x275))+(((-1.0)*x277*x278))+(((-1.0)*cj3*x272))+(((1.9e-7)*x280))+((x277*x281))+((x277*x282))+(((-1.0)*x274*x280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x283.valid){
continue;
}
CheckValue<IkReal> x284=IKPowWithIntegerCheck(IKsign(((((-1.9e-7)*x276))+(((0.0715)*cj4))+(((0.14203)*x277)))),-1);
if(!x284.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x283.value)+(((1.5707963267949)*(x284.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x285=IKcos(j2);
IkReal x286=IKsin(j2);
IkReal x287=py*py;
IkReal x288=px*px;
IkReal x289=pz*pz;
IkReal x290=(r01*sj0);
IkReal x291=(py*sj1);
IkReal x292=((1.0)*cj1);
IkReal x293=((0.0715)*cj3);
IkReal x294=((1.0)*sj1);
IkReal x295=(py*sj0);
IkReal x296=((0.0965)*r02);
IkReal x297=((2.0)*pz);
IkReal x298=(cj0*sj1);
IkReal x299=(pz*r01);
IkReal x300=(px*r01);
IkReal x301=(cj1*r00);
IkReal x302=((2.0)*px);
IkReal x303=((0.28406)*r02);
IkReal x304=(cj4*sj3);
IkReal x305=(cj1*r02);
IkReal x306=(cj0*py);
IkReal x307=(r02*sj1);
IkReal x308=(px*sj0);
IkReal x309=((0.0715)*sj3);
IkReal x310=((0.0252847708999639)*cj3);
IkReal x311=((0.0965)*pz);
IkReal x312=(cj0*r00);
IkReal x313=(r00*sj0);
IkReal x314=(px*r00);
IkReal x315=(py*r01);
IkReal x316=((0.28406)*pz);
IkReal x317=(cj0*r01);
IkReal x318=(sj4*x286);
IkReal x319=(cj0*px*r02);
IkReal x320=(pz*x313);
IkReal x321=((5.39714e-8)*x286);
IkReal x322=(cj4*x285);
IkReal x323=(sj4*x285);
IkReal x324=(cj4*x286);
IkReal x325=(r02*x289);
IkReal x326=(x287*x312);
evalcond[0]=(((x285*x304))+((sj1*x290))+x305+((r00*x298))+((cj3*x324)));
evalcond[1]=((((-1.0)*x286*x304))+(((-1.0)*x290*x292))+(((-1.0)*x292*x312))+x307+((cj3*x322)));
evalcond[2]=((-0.14203)+((x285*x309))+((sj0*x291))+(((-1.9e-7)*x285))+((px*x298))+((cj1*pz))+((x286*x293))+(((0.14203)*x286)));
evalcond[3]=((0.04825)+(((-1.0)*cj0*px*x292))+(((-1.0)*x286*x309))+((x285*x293))+(((1.9e-7)*x286))+(((0.14203)*x285))+((pz*sj1))+(((-1.0)*x292*x295)));
evalcond[4]=(((x293*x318))+(((-1.0)*x294*x300))+(((-1.0)*r02*x292*x308))+(((-0.14203)*x313))+((pz*sj0*x301))+(((-1.0)*cj0*x292*x299))+(((0.14203)*x318))+(((0.14203)*x317))+((x309*x323))+((r00*x291))+((x305*x306))+(((-1.9e-7)*x323)));
evalcond[5]=((((-1.0)*x292*x300))+(((0.04825)*x317))+(((-0.04825)*x313))+(((-1.0)*x293*x323))+((x309*x318))+(((-1.9e-7)*x318))+(((-1.0)*cj0*r02*x291))+(((-1.0)*x294*x320))+((x298*x299))+(((-0.14203)*x323))+((py*x301))+((x307*x308)));
evalcond[6]=((((-1.0)*x292*x326))+(((-0.0150602708999639)*x286*x304))+((x312*x316))+(((-1.0)*pz*x296))+(((-0.0965)*x314))+(((-0.0965)*x315))+((x295*x297*x305))+(((-0.0178444584)*cj1*x290))+((x287*x307))+(((2.0)*cj1*x300*x306))+((cj1*x287*x290))+(((-1.0)*x289*x290*x292))+(((0.0178444584)*x307))+(((-1.0)*cj0*px*x303))+(((-1.0)*x295*x303))+(((0.013705895)*r00*x298))+(((-1.0)*x294*x325))+(((-1.0)*x289*x292*x312))+(((-1.0)*r01*x291*x297))+(((-0.02031029)*x322))+((x288*x307))+((x290*x316))+(((-1.0)*sj1*x297*x314))+(((-0.0178444584)*cj0*x301))+(((-1.0)*x310*x322))+((cj0*px*x297*x305))+(((-1.0)*x288*x290*x292))+(((0.013705895)*x305))+(((5.39714e-8)*x285*x304))+((x295*x301*x302))+(((0.013705895)*sj1*x290))+(((-2.717e-8)*x324))+(((-1.0)*cj3*cj4*x321))+((cj0*x288*x301)));
evalcond[7]=((((-1.0)*cj0*px*x296))+(((-1.0)*x292*x325))+(((-1.0)*x291*x302*x313))+(((2.717e-8)*x322))+(((-0.0178444584)*x305))+(((-0.0178444584)*r00*x298))+(((-1.0)*x288*x294*x312))+(((-0.013705895)*cj0*x301))+(((0.0150602708999639)*x285*x304))+((x287*x305))+((x304*x321))+((r00*x287*x298))+(((-1.0)*px*r02*x297*x298))+((sj1*x289*x290))+(((-1.0)*x287*x290*x294))+((r00*x289*x298))+(((-0.0178444584)*sj1*x290))+((sj1*x288*x290))+(((-0.02031029)*x324))+((x311*x312))+((x288*x305))+(((-1.0)*r02*sj0*x291*x297))+(((-1.0)*x295*x296))+(((0.28406)*x314))+(((0.28406)*x315))+((x290*x311))+(((-2.0)*cj0*x291*x300))+(((5.39714e-8)*cj3*x322))+(((-1.0)*x310*x324))+(((-0.013705895)*cj1*x290))+(((0.013705895)*x307))+((pz*x303))+(((-1.0)*px*x297*x301))+(((-1.0)*cj1*x297*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x327=((0.0715)*cj3);
IkReal x328=((0.0715)*sj3);
IkReal x329=(cj0*sj1);
IkReal x330=(cj1*r02);
IkReal x331=(cj4*sj3);
IkReal x332=(cj1*pz);
IkReal x333=(cj3*cj4);
IkReal x334=((0.14203)*x331);
IkReal x335=(r01*sj0*sj1);
IkReal x336=((1.0)*x333);
IkReal x337=(py*sj0*sj1);
CheckValue<IkReal> x338=IKPowWithIntegerCheck(IKsign(((((-1.9e-7)*x333))+(((-1.0)*x334)))),-1);
if(!x338.valid){
continue;
}
CheckValue<IkReal> x339 = IKatan2WithCheck(IkReal(((((1.9e-7)*x330))+(((1.9e-7)*x335))+((x331*x337))+((x331*x332))+(((-1.0)*x328*x330))+(((-1.0)*x328*x335))+(((-1.0)*x334))+((px*x329*x331))+(((-1.0)*r00*x328*x329))+(((1.9e-7)*r00*x329)))),IkReal(((((0.14203)*r00*x329))+((r00*x327*x329))+(((-1.0)*px*x329*x336))+((x327*x330))+((x327*x335))+(((-1.0)*x332*x336))+(((-1.0)*x336*x337))+(((0.14203)*x330))+(((0.14203)*x335))+(((0.14203)*x333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x339.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x338.value)))+(x339.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x340=IKcos(j2);
IkReal x341=IKsin(j2);
IkReal x342=py*py;
IkReal x343=px*px;
IkReal x344=pz*pz;
IkReal x345=(r01*sj0);
IkReal x346=(py*sj1);
IkReal x347=((1.0)*cj1);
IkReal x348=((0.0715)*cj3);
IkReal x349=((1.0)*sj1);
IkReal x350=(py*sj0);
IkReal x351=((0.0965)*r02);
IkReal x352=((2.0)*pz);
IkReal x353=(cj0*sj1);
IkReal x354=(pz*r01);
IkReal x355=(px*r01);
IkReal x356=(cj1*r00);
IkReal x357=((2.0)*px);
IkReal x358=((0.28406)*r02);
IkReal x359=(cj4*sj3);
IkReal x360=(cj1*r02);
IkReal x361=(cj0*py);
IkReal x362=(r02*sj1);
IkReal x363=(px*sj0);
IkReal x364=((0.0715)*sj3);
IkReal x365=((0.0252847708999639)*cj3);
IkReal x366=((0.0965)*pz);
IkReal x367=(cj0*r00);
IkReal x368=(r00*sj0);
IkReal x369=(px*r00);
IkReal x370=(py*r01);
IkReal x371=((0.28406)*pz);
IkReal x372=(cj0*r01);
IkReal x373=(sj4*x341);
IkReal x374=(cj0*px*r02);
IkReal x375=(pz*x368);
IkReal x376=((5.39714e-8)*x341);
IkReal x377=(cj4*x340);
IkReal x378=(sj4*x340);
IkReal x379=(cj4*x341);
IkReal x380=(r02*x344);
IkReal x381=(x342*x367);
evalcond[0]=(((r00*x353))+x360+((x340*x359))+((sj1*x345))+((cj3*x379)));
evalcond[1]=((((-1.0)*x347*x367))+(((-1.0)*x341*x359))+x362+(((-1.0)*x345*x347))+((cj3*x377)));
evalcond[2]=((-0.14203)+((px*x353))+((x340*x364))+((cj1*pz))+((sj0*x346))+((x341*x348))+(((-1.9e-7)*x340))+(((0.14203)*x341)));
evalcond[3]=((0.04825)+(((-1.0)*cj0*px*x347))+(((1.9e-7)*x341))+(((-1.0)*x347*x350))+((pz*sj1))+((x340*x348))+(((-1.0)*x341*x364))+(((0.14203)*x340)));
evalcond[4]=(((r00*x346))+((x364*x378))+(((-1.0)*cj0*x347*x354))+(((-1.0)*r02*x347*x363))+(((-1.9e-7)*x378))+(((-1.0)*x349*x355))+(((0.14203)*x372))+(((0.14203)*x373))+(((-0.14203)*x368))+((x348*x373))+((pz*sj0*x356))+((x360*x361)));
evalcond[5]=(((x364*x373))+((py*x356))+(((-1.9e-7)*x373))+((x353*x354))+(((-0.14203)*x378))+(((-1.0)*cj0*r02*x346))+(((0.04825)*x372))+(((-1.0)*x348*x378))+(((-1.0)*x347*x355))+(((-0.04825)*x368))+(((-1.0)*x349*x375))+((x362*x363)));
evalcond[6]=(((x367*x371))+((x350*x352*x360))+(((0.0178444584)*x362))+(((2.0)*cj1*x355*x361))+(((-0.0965)*x369))+(((-1.0)*x349*x380))+(((-0.02031029)*x377))+((x342*x362))+(((-1.0)*cj3*cj4*x376))+(((-0.0965)*x370))+((cj0*px*x352*x360))+((cj1*x342*x345))+((x343*x362))+(((0.013705895)*sj1*x345))+(((5.39714e-8)*x340*x359))+((cj0*x343*x356))+(((-1.0)*x347*x381))+(((-2.717e-8)*x379))+(((-0.0150602708999639)*x341*x359))+(((-1.0)*x344*x345*x347))+(((-1.0)*r01*x346*x352))+(((-1.0)*cj0*px*x358))+(((0.013705895)*x360))+(((-0.0178444584)*cj1*x345))+(((-1.0)*x344*x347*x367))+((x350*x356*x357))+((x345*x371))+(((-1.0)*x343*x345*x347))+(((-1.0)*sj1*x352*x369))+(((-1.0)*pz*x351))+(((-0.0178444584)*cj0*x356))+(((0.013705895)*r00*x353))+(((-1.0)*x350*x358))+(((-1.0)*x365*x377)));
evalcond[7]=((((2.717e-8)*x377))+(((-0.02031029)*x379))+((r00*x344*x353))+((x342*x360))+(((-1.0)*px*r02*x352*x353))+((x343*x360))+(((0.0150602708999639)*x340*x359))+(((-0.013705895)*cj0*x356))+((x366*x367))+(((-0.0178444584)*x360))+(((-1.0)*x347*x380))+((pz*x358))+(((-1.0)*cj0*px*x351))+((x359*x376))+(((0.013705895)*x362))+(((-1.0)*x342*x345*x349))+((r00*x342*x353))+((sj1*x343*x345))+(((-0.013705895)*cj1*x345))+((x345*x366))+(((5.39714e-8)*cj3*x377))+(((-1.0)*r02*sj0*x346*x352))+(((-2.0)*cj0*x346*x355))+(((-1.0)*x346*x357*x368))+(((0.28406)*x370))+(((-0.0178444584)*r00*x353))+(((0.28406)*x369))+(((-1.0)*cj1*x352*x370))+(((-1.0)*x343*x349*x367))+(((-1.0)*px*x352*x356))+((sj1*x344*x345))+(((-0.0178444584)*sj1*x345))+(((-1.0)*x350*x351))+(((-1.0)*x365*x379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x382=((1.0)*sj1);
IkReal x383=((1.0)*sj3);
IkReal x384=(cj3*r02);
IkReal x385=(r01*sj0);
IkReal x386=(cj0*r00);
IkReal x387=(cj3*x385);
IkReal x388=(cj1*x386);
CheckValue<IkReal> x389 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x383*x385))+((r02*sj1*sj3))+(((-1.0)*cj3*x382*x386))+(((-1.0)*cj1*x384))+(((-1.0)*x382*x387))+(((-1.0)*x383*x388)))),IkReal((((cj3*x388))+((cj1*x387))+(((-1.0)*sj3*x382*x386))+(((-1.0)*sj3*x382*x385))+(((-1.0)*cj1*r02*x383))+(((-1.0)*x382*x384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x389.valid){
continue;
}
CheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x390.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x389.value)+(((1.5707963267949)*(x390.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x391=IKcos(j2);
IkReal x392=IKsin(j2);
IkReal x393=py*py;
IkReal x394=px*px;
IkReal x395=pz*pz;
IkReal x396=(r01*sj0);
IkReal x397=(py*sj1);
IkReal x398=((1.0)*cj1);
IkReal x399=((0.0715)*cj3);
IkReal x400=((1.0)*sj1);
IkReal x401=(py*sj0);
IkReal x402=((0.0965)*r02);
IkReal x403=((2.0)*pz);
IkReal x404=(cj0*sj1);
IkReal x405=(pz*r01);
IkReal x406=(px*r01);
IkReal x407=(cj1*r00);
IkReal x408=((2.0)*px);
IkReal x409=((0.28406)*r02);
IkReal x410=(cj4*sj3);
IkReal x411=(cj1*r02);
IkReal x412=(cj0*py);
IkReal x413=(r02*sj1);
IkReal x414=(px*sj0);
IkReal x415=((0.0715)*sj3);
IkReal x416=((0.0252847708999639)*cj3);
IkReal x417=((0.0965)*pz);
IkReal x418=(cj0*r00);
IkReal x419=(r00*sj0);
IkReal x420=(px*r00);
IkReal x421=(py*r01);
IkReal x422=((0.28406)*pz);
IkReal x423=(cj0*r01);
IkReal x424=(sj4*x392);
IkReal x425=(cj0*px*r02);
IkReal x426=(pz*x419);
IkReal x427=((5.39714e-8)*x392);
IkReal x428=(cj4*x391);
IkReal x429=(sj4*x391);
IkReal x430=(cj4*x392);
IkReal x431=(r02*x395);
IkReal x432=(x393*x418);
evalcond[0]=(((sj1*x396))+((r00*x404))+((cj3*x430))+x411+((x391*x410)));
evalcond[1]=((((-1.0)*x392*x410))+x413+(((-1.0)*x398*x418))+(((-1.0)*x396*x398))+((cj3*x428)));
evalcond[2]=((-0.14203)+((px*x404))+((sj0*x397))+(((-1.9e-7)*x391))+((cj1*pz))+(((0.14203)*x392))+((x391*x415))+((x392*x399)));
evalcond[3]=((0.04825)+(((-1.0)*x392*x415))+(((-1.0)*cj0*px*x398))+((x391*x399))+(((1.9e-7)*x392))+(((-1.0)*x398*x401))+(((0.14203)*x391))+((pz*sj1)));
evalcond[4]=(((x399*x424))+((x411*x412))+(((-1.0)*r02*x398*x414))+((r00*x397))+((x415*x429))+(((-1.9e-7)*x429))+(((-1.0)*x400*x406))+((pz*sj0*x407))+(((-0.14203)*x419))+(((0.14203)*x424))+(((0.14203)*x423))+(((-1.0)*cj0*x398*x405)));
evalcond[5]=((((0.04825)*x423))+((py*x407))+(((-0.14203)*x429))+((x404*x405))+((x413*x414))+((x415*x424))+(((-1.9e-7)*x424))+(((-0.04825)*x419))+(((-1.0)*x398*x406))+(((-1.0)*x399*x429))+(((-1.0)*x400*x426))+(((-1.0)*cj0*r02*x397)));
evalcond[6]=((((0.013705895)*sj1*x396))+(((-1.0)*x416*x428))+(((5.39714e-8)*x391*x410))+(((-0.0150602708999639)*x392*x410))+((x393*x413))+((cj0*x394*x407))+(((0.013705895)*x411))+(((0.013705895)*r00*x404))+((cj0*px*x403*x411))+(((-0.0178444584)*cj1*x396))+(((0.0178444584)*x413))+((x401*x403*x411))+(((-2.717e-8)*x430))+((x418*x422))+(((-1.0)*x401*x409))+(((-1.0)*x395*x398*x418))+(((-1.0)*cj3*cj4*x427))+(((-1.0)*r01*x397*x403))+((x401*x407*x408))+((cj1*x393*x396))+(((2.0)*cj1*x406*x412))+(((-1.0)*x400*x431))+(((-1.0)*x398*x432))+((x394*x413))+(((-1.0)*sj1*x403*x420))+(((-0.0178444584)*cj0*x407))+(((-0.0965)*x420))+(((-0.0965)*x421))+(((-1.0)*pz*x402))+(((-1.0)*x394*x396*x398))+(((-1.0)*x395*x396*x398))+((x396*x422))+(((-0.02031029)*x428))+(((-1.0)*cj0*px*x409)));
evalcond[7]=((((-1.0)*cj1*x403*x421))+((r00*x395*x404))+((pz*x409))+(((-0.013705895)*cj0*x407))+((x393*x411))+(((-1.0)*x416*x430))+((x410*x427))+(((0.013705895)*x413))+(((0.0150602708999639)*x391*x410))+(((-2.0)*cj0*x397*x406))+(((-0.0178444584)*sj1*x396))+(((5.39714e-8)*cj3*x428))+(((-0.013705895)*cj1*x396))+(((-1.0)*x401*x402))+(((0.28406)*x421))+(((0.28406)*x420))+((x417*x418))+(((2.717e-8)*x428))+(((-1.0)*px*r02*x403*x404))+(((-0.0178444584)*x411))+((r00*x393*x404))+((sj1*x395*x396))+(((-1.0)*x398*x431))+(((-1.0)*r02*sj0*x397*x403))+((x394*x411))+(((-1.0)*x394*x400*x418))+(((-0.0178444584)*r00*x404))+(((-1.0)*px*x403*x407))+((sj1*x394*x396))+(((-1.0)*x393*x396*x400))+(((-0.02031029)*x430))+(((-1.0)*x397*x408*x419))+(((-1.0)*cj0*px*x402))+((x396*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "cd76f5f7a40336204935d0b321108a23"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
